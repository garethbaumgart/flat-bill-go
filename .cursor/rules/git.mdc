## Git and Version Control

### Commit Strategy

- **NEVER execute any git commands until all tests pass successfully**
- **ALWAYS run `flutter test` before any git operations**
- **ONLY proceed with git commands after confirming zero test failures**
- **ALWAYS create a commit after each prompted change or feature implementation**
- Use conventional commit format: `type(scope): description`
  - Types: feat, fix, docs, style, refactor, test, chore
  - Examples: `feat: Add PDF export functionality`, `fix: Resolve filename path issue`
- Include descriptive commit messages that explain what was changed and why
- Stage all relevant files with `git add .` before committing
- Use `git status` to verify changes before committing
- Commit immediately after implementing a feature or fixing an issue
- Include both the change and the reasoning in the commit message
- If multiple related changes are made, group them in a single commit
- Always test the functionality before committing
- Use `git push` to sync with remote repository when appropriate

### Branch Management

- Use descriptive branch names: `feature/pdf-export`, `fix/bill-calculation`
- Keep branches focused on single features or fixes
- Delete feature branches after merging to main
- Use pull requests for code review when appropriate

### File Organization

- Stage all changes with `git add .` unless specific files need to be excluded
- Use `.gitignore` to exclude build artifacts and temporary files
- Keep commit history clean and logical
- Avoid committing large binary files or sensitive data

### Best Practices

- **NEVER commit code that fails tests**
- **ALWAYS run tests before any git operation**
- **ONLY commit when all tests pass with zero failures**
- Commit frequently with small, focused changes
- Write clear, descriptive commit messages
- Test changes before committing
- Review staged changes with `git diff --cached`
- Use meaningful commit messages that explain the "why" not just the "what"

### Testing-Git Integration

- **MANDATORY: Run `flutter test` before any git command**
- **BLOCK: All git operations if tests fail**
- **VERIFY: Zero test failures before staging files**
- **ENSURE: All compilation errors are resolved before git operations**
- **CONFIRM: All UI tests pass before committing**
- **VALIDATE: No regression in existing functionality**
- **CHECK: Both unit tests and widget tests pass**
- **GUARANTEE: Code quality before version control**

### Git Workflow with Testing

1. **Make Changes** → Implement feature or fix
2. **Run Tests** → `flutter test` to verify functionality
3. **Fix Failures** → Address any test failures systematically
4. **Re-run Tests** → Confirm all tests pass
5. **Stage Files** → `git add .` only after tests pass
6. **Commit Changes** → `git commit` with descriptive message
7. **Push Changes** → `git push` to remote repository

### Error Prevention

- **NEVER skip testing step in git workflow**
- **ALWAYS verify test results before git operations**
- **ONLY proceed with git commands on clean test runs**
- **BLOCK commits with failing tests**
- **ENSURE code quality before version control**
description:
globs:
alwaysApply: false
---
